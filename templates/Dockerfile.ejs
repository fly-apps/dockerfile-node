# syntax = docker/dockerfile:1

# Adjust NODE_VERSION as desired
ARG NODE_VERSION=<%= distroless ? parseInt(nodeVersion) : nodeVersion %>
FROM node:${NODE_VERSION}-slim as <% if (distroless) { -%>build<% } else { %>base<% } %>

<% if (!distroless) { -%>
LABEL fly_launch_runtime="<%= runtime %>"

<% } -%>
# <%= runtime %> app lives here
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
<% if (yarn && yarnVersion != yarnClassic) { -%>
ARG YARN_VERSION=<%= yarnVersion %>
<% if(yarnVersion.startsWith('3.')) {-%>

# Install Yarn 3
RUN corepack enable && \
    yarn set version ${YARN_VERSION}
<% } else { -%>
RUN npm install -g yarn@$YARN_VERSION --force
<% } -%>
<% } else if (pnpm) { -%>

ARG PNPM_VERSION=<%= pnpmVersion %>
RUN npm install -g pnpm@$PNPM_VERSION
<% } %>
<% if (!distroless) { -%>

# Throw-away build stage to reduce size of final image
FROM base as build

<% } -%>
# Install packages needed to build node modules
RUN apt-get update -qq && \
    apt-get install -y <%= python %> pkg-config build-essential <%
    if (prisma) { %>openssl <% } %>

# Install node modules
COPY<% if (options.link) { %> --link<% } %> <%= packageFiles.join(' ') %> ./
RUN <%= packagerInstall %>

<% if (prisma) { -%>
# Generate Prisma Client
COPY<% if (options.link) { %> --link<% } %> prisma .
RUN npx prisma generate

<% } -%>
# Copy application code
COPY<% if (options.link) { %> --link<% } %> . .

<% if (build) { -%>
# Build application
RUN <%= packager %> run build

<% } -%>
<% if (devDependencies && !nestjs && !adonisjs) { -%>
# Remove development dependencies
RUN <%= packagerPrune %>

<% } -%>

# Final stage for app image
<% if (distroless) { -%>
FROM gcr.io/distroless/nodejs${NODE_VERSION}

LABEL fly_launch_runtime="<%= runtime %>"

# <%= runtime %> app lives here
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
<% } else { -%>
FROM base
<% } -%>

<% if (litefs) { -%>
# Install, configure litefs
COPY --from=flyio/litefs:0.4.0 /usr/local/bin/litefs /usr/local/bin/litefs
COPY --link <%= configDir %>litefs.yml /etc/litefs.yml

<% } -%>
<% if (deployPackages.length > 0) { -%>
# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y <%= deployPackages.join(' ')%> && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

<% } -%>
# Copy built application
COPY --from=build /app /app

<% if (false && !options.root) /* needs more testing */ { -%>
# Run as a non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    useradd <%= user %> --gid nodejs --home /app --shell /bin/bash
USER <%= user %>:nodejs

<% } -%>
<% if (adonisjsFileUpload) { -%>
RUN mkdir -p /app/tmp/uploads
VOLUME /app/tmp/uploads
<% } -%>
<% if (sqlite3) { -%>
# Setup sqlite3 on a separate volume
RUN mkdir -p /data<% if (litefs) { %> /litefs <% } %>
VOLUME /data
<% if (epicStack) { -%>
ENV LITEFS_DIR="/litefs"
ENV DATABASE_FILENAME="sqlite.db"
ENV DATABASE_PATH="$LITEFS_DIR/$DATABASE_FILENAME"
ENV DATABASE_URL="file://$DATABASE_PATH"
ENV CACHE_DATABASE_FILENAME="cache.db"
ENV CACHE_DATABASE_PATH="$LITEFS_DIR/$CACHE_DATABASE_FILENAME"
ENV PORT=<%= port+1 %>
<% } else { -%>
ENV DATABASE_URL="file:///<%= litefs ? 'litefs' : 'data' %>/sqlite.db"<% if (litefs) { %> \
    PORT=<%= port+1 %> <% } %>
<% } -%>

<% if (remix) { -%>
# add shortcut for connecting to database CLI
RUN echo "#!/bin/sh\nset -x\nsqlite3 \$DATABASE_URL" > /usr/local/bin/database-cli && chmod +x /usr/local/bin/database-cli

<% } -%>
<% } -%>
<% if (entrypoint) { -%>
<% if (entrypointFixups.length) { -%>
# Adjust entrypoint to be executable on Linux
RUN <%- entrypointFixups.join(' && \\\n    ') %>

<% } -%>
<% if (prisma) { -%>
# Entrypoint prepares the database.
<% } else { -%>
# Entrypoint sets up the container.
<% } -%>
ENTRYPOINT [ <% if (litefs) { %>"litefs", "mount", "--", <% } %>"/app/<%= configDir %>docker-entrypoint.js" ]

<% } -%>
# Start the server by default, this can be overwritten at runtime
EXPOSE <%= port %>
<% if (nuxtjs) { -%>
ENV HOST=0
<% } -%>
<% if (adonisjs) { -%>
ENV HOST="0.0.0.0"
ENV PORT="3000"
ENV CACHE_VIEWS="true"
ENV SESSION_DRIVER="cookie"
ENV DRIVE_DISK="local"
<% if (postgres) { -%>
ENV DB_CONNECTION="pg"
<% } -%>
<% } -%>
CMD <%- JSON.stringify(startCommand, null, 1).replaceAll(/\n\s*/g, " ") %>
